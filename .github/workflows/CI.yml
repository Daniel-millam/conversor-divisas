
# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
 
name: CI
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '15.14.0'
          cache: 'npm'
 
      - name: Install dependencies
        run: npm ci
        env:
          CI: true
 
      - name: Run esLint
        run: npm run lint
 
      - name: Run prettier
        run:  npm run prettier
         
      - name: Configure Git User
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
 
        # Get version number and save it in a variable
      - name: Get package version
        run: echo "::set-output name=tag-version::$(jq '.version' package.json | sed 's/-SNAPSHOT.0//' | xargs npm version --no-git-tag-version | sed 's/v//')"
        id: version
        shell: bash
 
      - name: Build
        run: npm run build
 
        # Allows you to release using an already created tag, if the given tag does not exist it will fail
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ steps.version.outputs.tag-version }}
          token: ${{ secrets.GITHUB_TOKEN }}
 
        # Prepare prerelease with the preid SNAPSHOT (ex.: 0.0.0-SNAPSHOT.0)
      - name: Create SNAPSHOT
        run:  npm version prerelease --preid SNAPSHOT --no-git-tag-version
 
      - name: Update version in remote
        run: |
          git add package.json
          git add package-lock.json
          git commit -m "Update SNAPSHOT"
          git push
